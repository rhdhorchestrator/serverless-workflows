apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: workflow executes a plan by creating a migration and waiting for it to be successful or failed
    sonataflow.org/expressionLang: jq
    sonataflow.org/profile: gitops
    sonataflow.org/version: "1.0"
  creationTimestamp: null
  labels:
    app: mtv-migration
    app.kubernetes.io/component: serverless-workflow
    app.kubernetes.io/managed-by: sonataflow-operator
    app.kubernetes.io/name: mtv-migration
    sonataflow.org/workflow-app: mtv-migration
    sonataflow.org/workflow-namespace: ""
  name: mtv-migration
spec:
  flow:
    annotations:
      - workflow-type/infrastructure
    dataInputSchema:
      failOnValidationErrors: true
      schema: schemas/mtv-input.json
    functions:
      - name: createNotification
        operation: notifications#createNotification
        type: rest
      - name: createPlan
        operation: specs/mtv.yaml#createPlan
        type: rest
      - name: getPlan
        operation: specs/mtv.yaml#getPlan
        type: rest
      - name: createMigration
        operation: specs/mtv.yaml#createMigration
        type: rest
      - name: getMigration
        operation: specs/mtv.yaml#getMigration
        type: rest
      - name: getPlanError
        operation: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical"))[0].message
        type: expression
      - name: getMigrationError
        operation: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical" or .type == "Failed"))[0].message
        type: expression
      - name: successMigrate
        operation: '{ "result": { "message": "MTV migration " + .migrationName + " succeeded", "outputs":[] } }'
        type: expression
      - name: errorMigrate
        operation: '{ "result": { "message": "MTV migration " + .migrationName + " failed.", "outputs":[ { "key":"Error", "value": .migrationErrorMessage } ] } }'
        type: expression
    start:
      stateName: SelectOperation
    states:
      - dataConditions:
          - condition: .operation == "MIGRATE"
            name: JustMigrate
            transition:
              nextState: CreateMigration
        defaultCondition:
          transition:
            nextState: CreatePlan
        name: SelectOperation
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                metadata:
                  name: .migrationName
                  namespace: .migrationNamespace
                namespace: .migrationNamespace
                spec:
                  map:
                    network:
                      name: .networkMap
                      namespace: .migrationNamespace
                    storage:
                      name: .storageMap
                      namespace: .migrationNamespace
                  provider:
                    destination:
                      name: .destinationProvider
                      namespace: .migrationNamespace
                    source:
                      name: .sourceProvider
                      namespace: .migrationNamespace
                  targetNamespace: .migrationNamespace
                  vms: .vms
              invoke: sync
              refName: createPlan
        name: CreatePlan
        transition:
          nextState: GetPlan
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .getStatusResult
              useResults: true
            functionRef:
              arguments:
                namespace: .migrationNamespace
                plan: .migrationName
              invoke: sync
              refName: getPlan
            name: getPlan
            sleep:
              before: PT10S
        name: GetPlan
        transition:
          nextState: CheckPlanStatus
        type: operation
      - dataConditions:
          - condition: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical")) | length > 0
            name: PlanFailure
            transition:
              nextState: PlanFailure
          - condition: .getStatusResult.status.conditions | map(select(.type == "Ready")) | length > 0
            name: PlanReady
            transition:
              nextState: NextOperation
        defaultCondition:
          transition:
            nextState: GetPlan
        name: CheckPlanStatus
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .planErrorMessage
              useResults: true
            functionRef:
              invoke: sync
              refName: getPlanError
            name: setPlanErrorMessage
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"MTV plan " + .migrationName + " is not ready for migration. Error: " + .planErrorMessage'
                  severity: critical
                  title: MTV plan is not ready for migration
                  topic: MTV plan assessment workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: createNotification
        end:
          terminate: true
        metadata:
          errorMessage: '"MTV plan " + .migrationName + " is not ready for migration"'
        name: PlanFailure
        stateDataFilter:
          output: '{result: {message: .planErrorMessage}}'
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"MTV plan " + .migrationName + " is ready for migration"'
                  severity: normal
                  title: MTV plan is ready for migration
                  topic: MTV plan assessment workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: createNotification
        end:
          terminate: true
        name: PlanReady
        stateDataFilter:
          output: '{result: {message: "MTV plan successful", "outputs": [] }}'
        type: operation
      - dataConditions:
          - condition: .operation == "PLAN_AND_MIGRATE"
            name: Migrate
            transition:
              nextState: CreateMigration
        defaultCondition:
          transition:
            nextState: PlanReady
        name: NextOperation
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Migration
                metadata:
                  name: .migrationName
                  namespace: .migrationNamespace
                namespace: .migrationNamespace
                spec:
                  plan:
                    name: .migrationName
                    namespace: .migrationNamespace
              invoke: sync
              refName: createMigration
        name: CreateMigration
        transition:
          nextState: GetMigration
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .getStatusResult
              useResults: true
            functionRef:
              arguments:
                migration: .migrationName
                namespace: .migrationNamespace
              invoke: sync
              refName: getMigration
            name: getMigration
            sleep:
              before: PT10S
        name: GetMigration
        transition:
          nextState: CheckMigrationStatus
        type: operation
      - dataConditions:
          - condition: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical" or .type == "Failed")) | length > 0
            name: MigrationFailure
            transition:
              nextState: MigrationFailure
          - condition: .getStatusResult.status.conditions | map(select(.type == "Succeeded")) | length > 0
            name: MigrationSuccessful
            transition:
              nextState: MigrationSuccessful
        defaultCondition:
          transition:
            nextState: GetMigration
        name: CheckMigrationStatus
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .migrationErrorMessage
              useResults: true
            functionRef:
              invoke: sync
              refName: getMigrationError
            name: setMigrationErrorMessage
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"MTV migration " + .migrationName + " failed. Error: " + .migrationErrorMessage'
                  severity: critical
                  title: MTV migration failed
                  topic: MTV migration workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: createNotification
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: errorMigrate
            name: setOutput
        end:
          terminate: true
        metadata:
          errorMessage: '"MTV migration " + .migrationName + " failed"'
        name: MigrationFailure
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"MTV migration " + .migrationName + " succeeded"'
                  severity: normal
                  title: MTV migration successful
                  topic: MTV migration workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: createNotification
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: successMigrate
            name: setOutput
        end:
          terminate: true
        name: MigrationSuccessful
        type: operation
  podTemplate:
    container:
      env:
        - name: NOTIFICATIONS_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              key: NOTIFICATIONS_BEARER_TOKEN
              name: mtv-migration-secrets
      image: quay.io/orchestrator/serverless-workflow-mtv-migration:30e1984769fe6e3f2c9d99e49c98a8b86b8d2b61
      resources: {}
  resources:
    configMaps:
      - configMap:
          name: 01-mtv-migration-resources-schemas
        workflowPath: schemas
      - configMap:
          name: 02-mtv-migration-resources-specs
        workflowPath: specs
  persistence:
    postgresql:
      secretRef:
        name: sonataflow-psql-postgresql
        userKey: postgres-username
        passwordKey: postgres-password
      serviceRef:
        name: sonataflow-psql-postgresql
        port: 5432
        databaseName: sonataflow
        databaseSchema: mtv-migration
status:
  address: {}
  lastTimeRecoverAttempt: null
